-- Vionyx Dead Rails Script
-- Based on functionality from provided script and WindUI library
-- Sliders replaced with text input fields for manual value adjustment
-- Added print statements and timeout for UI loading debugging

print("[Vionyx Script] Starting script execution...")

-- Load the WindUI library
print("[Vionyx Script] Attempting to load WindUI library...")
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
print("[Vionyx Script] WindUI library load attempt complete.")

-- Check if WindUI loaded successfully
if not WindUI or typeof(WindUI) ~= "table" then
    print("[Vionyx Script] ERROR: WindUI library failed to load or returned unexpected value.")
    -- You might want to add a simple message box here if possible in your executor
    -- message("Vionyx Script Error: Failed to load UI library.")
    return -- Stop script execution if UI library didn't load
end

print("[Vionyx Script] WindUI library loaded successfully.")

-- Basic UI confirmation popup
local Confirmed = false
local popupTimeout = 10 -- seconds to wait for popup confirmation
local popupStartTime = tick()

print("[Vionyx Script] Creating initial confirmation popup...")
WindUI:Popup({
    Title = "Welcome to Vionyx", -- Script Name
    Icon = "info", -- You might want a different icon relevant to Dead Rails
    Content = "This is the Vionyx script for Dead Rails.",
    Buttons = {
        {
            Title = "Continue",
            Icon = "arrow-right",
            Variant = "Primary",
            Callback = function()
                Confirmed = true
                print("[Vionyx Script] Popup 'Continue' button clicked. Confirmed = true.")
            end,
        }
        -- Removed Cancel button from popup for a simpler flow
    }
})
print("[Vionyx Script] Initial confirmation popup created.")

-- Wait for user to confirm the popup or for timeout
print("[Vionyx Script] Waiting for popup confirmation...")
repeat
    task.wait(0.1)
    if tick() - popupStartTime > popupTimeout then
        print("[Vionyx Script] Popup confirmation timed out.")
        -- You might want to add a simple message box here
        -- message("Vionyx Script: UI loading timed out.")
        return -- Stop script execution if popup times out
    end
until Confirmed

print("[Vionyx Script] Popup confirmed. Proceeding with main UI creation.")

-- Get essential Roblox Services
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace") -- Use Workspace to avoid conflict with local workspace variable later
local TweenService = game:GetService("TweenService") -- Added TweenService
local HttpService = game:GetService("HttpService") -- Added HttpService for potential future use

local localPlayer = Players.LocalPlayer

-- Variables for Dead Rails Functionality (extracted from provided script)
local highlightMode -- Used in ESP logic
local currentEntity -- Used in ESP dropdown
local renderConnection -- Connection for the RenderStepped loop
local aimbotTargetBodyPart = "Head" -- Default Aimbot target part
local aimbotFallbackPart = "HumanoidRootPart" -- Fallback Aimbot target part
local nightVisionOn = false
local espOn = false
local noclipEnabled = false
local aimbotEnabled = false
local addedESPModels = {} -- Table to track added ESP visuals
local onlyWhenAlive = true -- ESP setting
local highlightEnabled = true -- ESP setting
local warnNPCLabels = {} -- Table for warning labels
local frameCounter = 0 -- Counter for ESP update speed
local frameCount = 20 -- ESP update speed (frames) - Initial value
local priorityRadius = 90 -- Aimbot priority radius
local showAimbotCircle = true -- Aimbot FOV circle visibility
local fovAngleDegrees = 90 -- Aimbot FOV angle
local circleColor = Color3.fromRGB(255, 0, 0) -- Aimbot circle color
local circleThickness = 2 -- Aimbot circle thickness
local circleTransparency = 1 -- Aimbot circle transparency (0 is fully visible, 1 is fully transparent)

-- Drawing object for Aimbot FOV circle (requires Drawing library, common in executors)
local circle = Drawing.new("Circle")
circle.Color = circleColor
circle.Thickness = circleThickness
circle.Transparency = circleTransparency
circle.Visible = showAimbotCircle -- Initial visibility based on toggle state
circle.Filled = false

-- Entity Definitions (extracted from provided script)
-- These define how different entities in Dead Rails are named, highlighted, and tagged
local entityDefinitions = {
	Model_Unicorn = { name = "Unicorn", highlight = "highlight", tags = {} },
	Model_Banker = { name = "Banker", highlight = "highlight", tags = { "aimbot", "enemy" } },
	Model_Werewolf = { name = "Werewolf", highlight = "warn", tags = { "aimbot", "enemy" } },
	Model_RevolverOutlaw = { name = "Outlaw (Revolver)", highlight = "warn", tags = { "aimbot", "enemy" } },
	Model_RifleOutlaw = { name = "Outlaw (Rifle)", highlight = "warn", tags = { "aimbot", "enemy" } },
	Model_ShotgunOutlaw = { name = "Outlaw (Shotgun)", highlight = "warn", tags = { "aimbot", "enemy" } },
	Model_ZombieMiner = { name = "Bomber Zombie", highlight = "warn", tags = { "aimbot", "enemy", "kill-first" } },
	Model_ZombieSheriff = { name = "Sheriff Zombie", highlight = "warn", tags = { "aimbot", "enemy", "kill-first" } },
	Model_Vampire = { name = "Vampire", highlight = "warn", tags = { "aimbot", "enemy" } },
	Model_Runner = { name = "Zombie (Fast)", highlight = "ignore", tags = { "aimbot", "enemy" } },
	Model_Walker = { name = "Zombie (Slow)", highlight = "ignore", tags = { "aimbot", "enemy" } },
	Model_Horse = { name = "Horse", highlight = "ignore", tags = {} },
	Model_Wolf = { name = "Wolf", highlight = "ignore", tags = {} },
	Model_RifleSoldier = { name = "Ground Soldier", highlight = "none", tags = {} },
	Model_TurretSoldier = { name = "Turret Soldier", highlight = "none", tags = {} },
	Shopkeeper = { name = "Shopkeeper", highlight = "none", tags = {} },
	Model_ArmoredZombie = { name = "Zombie (Armor)", highlight = "none", tags = { "aimbot", "enemy" } },
	Model_ZombieRevolverSoldier = { name = "Zombie (Revolver)", highlight = "", tags = { "aimbot", "enemy" } },
	Model_ZombieRifleSoldier = { name = "Zombie (Rifle)", highlight = "", tags = { "aimbot", "enemy" } },
	Model_ZombieShotgunSoldier = { name = "Zombie (Shotgun)", highlight = "", tags = { "aimbot", "enemy" } }
}

-- Derived tables for easier lookup (extracted from provided script)
local defaultEntityHighlightModes = {}
local entityNames = {}
local entityTags = {}
local readableHighlightModes = {}
local readableToInternal = {}

for internalName, definition in pairs(entityDefinitions) do
    defaultEntityHighlightModes[internalName] = definition.highlight
    entityNames[internalName] = definition.name
    entityTags[internalName] = definition.tags

    local readableName = definition.name or internalName
    readableHighlightModes[readableName] = definition.highlight
    readableToInternal[readableName] = internalName
end

local playerChosenEntityHighlightModes = table.clone(defaultEntityHighlightModes)
local entityHighlightModes = table.clone(playerChosenEntityHighlightModes) -- This table will be used in the ESP logic

-- --- Utility Functions (adapted from provided script) ---

local function keys(tbl)
	local result = {}
	for k, _ in pairs(tbl) do
		table.insert(result, k)
	end
	return result
end

local function capitalizeFirst(str)
	return (str:sub(1, 1)):upper() .. (str:sub(2)):lower()
end

local function enableLighting()
	Lighting.Ambient = Color3.new(1, 1, 1)
	Lighting.Brightness = 5
	Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
	Lighting.ClockTime = 12 -- Assuming this affects lighting significantly
end

local function resetLighting()
	Lighting.Ambient = Color3.new(0, 0, 0)
	Lighting.Brightness = 2
	Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
    -- Reset ClockTime if needed, based on game default
end

-- Function to add ESP visuals to an entity model
local function addEntityESP(model)
	if model:FindFirstChild("Humanoid") and (not model:FindFirstChild("ESP_Added")) then
		-- Don't add ESP to players
		if Players:GetPlayerFromCharacter(model) then
			return
		end

		local mode = entityHighlightModes[model.Name] -- Get highlight mode for this entity type
		local name = entityNames[model.Name] or model.Name -- Get readable name
		local color = Color3.new(1, 0, 0) -- Default color (red)

		-- Determine color based on highlight mode
		if mode == "none" then
			return -- Don't add ESP if mode is 'none'
		elseif mode == "highlight" then
			color = Color3.fromRGB(0, 255, 0) -- Green for highlight
		elseif mode == "warn" then
			color = Color3.fromRGB(255, 255, 0) -- Yellow for warn
		end

		-- Add BoxHandleAdornments to parts
		for _, part in pairs(model:GetDescendants()) do
			if part:IsA("BasePart") then
				local box = Instance.new("BoxHandleAdornment")
				box.Size = part.Size
				box.Adornee = part
				box.AlwaysOnTop = true
				box.ZIndex = 10
				box.Transparency = 0.5
				box.Color3 = color
				box.Name = "ESPBox"
				box.Parent = part
			end
		end

		-- Add BillboardGui for name label
		local head = model:FindFirstChild("Head")
		if head and mode ~= "ignore" then -- Don't add label if mode is 'ignore'
			local billboard = Instance.new("BillboardGui")
			billboard.Name = "NameESP"
			billboard.Size = UDim2.new(0, 150, 0, 40)
			billboard.StudsOffset = Vector3.new(0, 2, 0)
			billboard.AlwaysOnTop = true
			billboard.Adornee = head
			billboard.Parent = head

			local nameLabel = Instance.new("TextLabel")
			nameLabel.Size = UDim2.new(1, 0, 1, 0)
			nameLabel.BackgroundTransparency = 1
			nameLabel.TextColor3 = Color3.new(1, 1, 1)
			nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
			nameLabel.TextStrokeTransparency = 0.5
			nameLabel.TextScaled = true
			nameLabel.Font = Enum.Font.SourceSansBold
			nameLabel.Text = name -- Initial text is just the entity name

			if mode == "warn" then
				warnNPCLabels[model] = nameLabel -- Store reference for updating distance
			end
			nameLabel.Parent = billboard
		end

		-- Add a tag to mark that ESP has been added
		local tag = Instance.new("BoolValue")
		tag.Name = "ESP_Added"
		tag.Parent = model

		table.insert(addedESPModels, model) -- Track added models
	end
end

-- Function to clear all added ESP visuals
local function clearESP()
	for _, model in pairs(addedESPModels) do
		-- Check if the model still exists in the workspace before trying to clear
		if model and model:IsDescendantOf(Workspace) then
			for _, part in pairs(model:GetDescendants()) do
				if part:IsA("BasePart") then
					local box = part:FindFirstChild("ESPBox")
					if box then
						box:Destroy()
					end
				end
				-- Also check for the BillboardGui directly on descendants
				if part:IsA("BillboardGui") and part.Name == "NameESP" then
					part:Destroy()
				end
			end
			local tag = model:FindFirstChild("ESP_Added")
			if tag then
				tag:Destroy()
			end
		end
	end
	-- Clear warning labels table
	for model, nameLabel in pairs(warnNPCLabels) do
		if nameLabel and nameLabel.Parent then
			nameLabel:Destroy()
		end
	end
	warnNPCLabels = {}
	addedESPModels = {} -- Clear the tracking table
end

-- --- Main Render Stepped Loop (adapted from provided script) ---
-- This loop runs every frame and handles the core logic for ESP, Aimbot, Noclip, and Night Vision.
renderConnection = RunService.RenderStepped:Connect(function()
	local camera = Workspace.CurrentCamera -- Use Workspace service
	local character = localPlayer.Character -- Get player character
	local rootPart = character and character:FindFirstChild("HumanoidRootPart") -- Get HumanoidRootPart

	-- ESP Logic
	if espOn then
		frameCounter = frameCounter + 1
		-- Update ESP visuals periodically based on frameCount
		if frameCounter % frameCount == 0 then
			local workspaceDescendants = Workspace:GetDescendants() -- Get current descendants

			for _, model in pairs(workspaceDescendants) do
				-- Check for entity models with Humanoids
				if model:IsA("Model") and model:FindFirstChild("Humanoid") then
					local humanoid = model.Humanoid
					local tagged = model:FindFirstChild("ESP_Added")

					-- Add ESP if not already added and entity is alive (or onlyWhenAlive is false)
					if not tagged and (not onlyWhenAlive or humanoid.Health > 0) then
						addEntityESP(model)
					-- Remove ESP if onlyWhenAlive is true and entity died
					elseif onlyWhenAlive and tagged and humanoid.Health <= 0 then
						-- Clear visuals for this specific dead entity
						for _, part in pairs(model:GetDescendants()) do
							if part:IsA("BasePart") then
								local box = part:FindFirstChild("ESPBox")
								if box then
									box:Destroy()
								end
							end
							if part:IsA("BillboardGui") and part.Name == "NameESP" then
								part:Destroy()
							end
						end
						local tag = model:FindFirstChild("ESP_Added")
						if tag then
							tag:Destroy()
						end
						-- Remove from tracking tables if necessary (more robust cleanup could be added)
					end
				end
			end

			-- Update distance in warning labels
			for model, label in pairs(warnNPCLabels) do
				-- Check if model and player character/root still exist
				if model and model:IsDescendantOf(Workspace) and localPlayer and localPlayer.Character and rootPart and model:FindFirstChild("HumanoidRootPart") then
					local distance = math.floor((rootPart.Position - model.HumanoidRootPart.Position).Magnitude)
					local name = entityNames[model.Name] or model.Name
					label.Text = ("⚠️ " or "") .. name .. " - " .. distance .. " meters"
				else
					-- Clean up label if model or character is gone
					if label and label.Parent then
						label:Destroy()
					end
					warnNPCLabels[model] = nil -- Remove from table
				end
			end
		end
	end

	-- Aimbot Logic
	if aimbotEnabled and character and rootPart and camera then
		local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
		-- Calculate FOV radius in screen space
		local fovRadius = math.tan(math.rad(fovAngleDegrees / 2)) * camera.ViewportSize.X

		local closestNormal, closestPriority = nil, nil
		local closestNormalDist, closestPriorityDist = math.huge, math.huge

		-- Find potential targets in workspace descendants
		for _, model in pairs(Workspace:GetDescendants()) do
			-- Check if it's a model with HumanoidRootPart and Humanoid, and not the local player's character
			if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("Humanoid") and model ~= character then
				local targetPartName = aimbotTargetBodyPart or aimbotFallbackPart -- Get preferred target part name
				local targetPart = model:FindFirstChild(targetPartName) or model:FindFirstChild(aimbotFallbackPart) -- Find target part

				local tags = entityTags[model.Name] -- Get entity tags
				-- Check if target part exists, entity has tags, has 'aimbot' tag, and is alive
				if targetPart and tags and table.find(tags, "aimbot") and model.Humanoid.Health > 0 then
					local dist = (targetPart.Position - rootPart.Position).Magnitude -- Distance from player character
					local screenPos, onScreen = camera:WorldToViewportPoint(targetPart.Position) -- Screen position

					-- Check if target is on screen and within FOV circle
					if onScreen then
                        local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                        if screenDist <= fovRadius then -- Use <= for targets exactly on the edge
                            -- Check for 'kill-first' tag and if within priority radius
                            if table.find(tags, "kill-first") and dist <= priorityRadius then
                                if dist < closestPriorityDist then
                                    closestPriority = targetPart -- Found a higher priority target
                                    closestPriorityDist = dist
                                end
                            -- Otherwise, consider as a normal target
                            elseif dist < closestNormalDist then
                                closestNormal = targetPart -- Found a closer normal target
                                closestNormalDist = dist
                            end
                        end
                    end
				end
			end
		end

		-- Select the target (priority target first, then normal closest)
		local target = closestPriority or closestNormal

		-- If a target is found, aim the camera
		if target then
			local camPos = camera.CFrame.Position
			local targetDir = (target.Position - camPos).Unit
			local newLook = camPos + targetDir

            -- Smooth aiming using TweenService (adapted from provided logic)
            -- The original script used a manual lerp, TweenService provides smoother control
            -- Note: A dedicated aimbot function might be better for more complex aiming
            local aimTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut) -- Adjust duration for smoothness
            local aimTween = TweenService:Create(camera, aimTweenInfo, {
                CFrame = CFrame.new(camPos, target.Position)
            })
            aimTween:Play()

		else
            -- If no target, stop any ongoing aim tween
            -- This part is tricky with multiple potential tweens. A dedicated aimbot controller
            -- would manage the active tween. For simplicity, we won't explicitly cancel here
            -- unless a specific tween object is tracked. The next frame will just not create a new tween.
		end

        -- Aimbot circle properties are updated via text input and applied here
        local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        local fovRadius = math.tan(math.rad(fovAngleDegrees / 2)) * camera.ViewportSize.X
        circle.Position = screenCenter
        circle.Radius = fovRadius

	else
		-- If aimbot is disabled, the circle visibility is still controlled by showAimbotCircle.
        -- The circle's position and radius are still updated here.
         local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
         local fovRadius = math.tan(math.rad(fovAngleDegrees / 2)) * camera.ViewportSize.X
         circle.Position = screenCenter
         circle.Radius = fovRadius
	end

    -- Aimbot circle visibility is controlled here based on the toggle state
    circle.Visible = showAimbotCircle
    -- Ensure circle properties are updated every frame based on current variable values
    circle.Thickness = circleThickness
    circle.Transparency = circleTransparency
    circle.Color = circleColor


	-- Noclip Logic
	if noclipEnabled then
		local char = localPlayer.Character
		if char then
			for _, part in pairs(char:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = false
				end
			end
		end
	else
        -- If noclip is disabled, reset CanCollide for character parts
        -- This requires knowing the original CanCollide state or setting it back to true.
        -- A more robust noclip implementation would handle this.
        -- For simplicity here, we won't explicitly reset CanCollide when disabled.
	end

	-- Night Vision Logic
	-- This is controlled by the toggle callback, but the effect persists via the Lighting service.
    -- The RenderStepped loop doesn't need to re-apply it every frame, just the toggle callback.

end)


-- Create the main window for the Vionyx Dead Rails script
print("[Vionyx Script] Creating main UI window...")
local Window = WindUI:CreateWindow({
    Title = "Vionyx", -- Script Name
    Icon = "bolt", -- Example icon
    Author = "Vionyx", -- Updated Author name
    Folder = "VionyxDeadRails", -- Changed folder name
    Size = UDim2.fromOffset(380, 360), -- Adjusted size as requested
    Transparent = true,
    Theme = "Dark", -- Or choose another theme
    User = {
        Enabled = true,
        Callback = function() print("User clicked on Vionyx UI") end,
        Anonymous = true
    },
    SideBarWidth = 200,
    HasOutline = true,
})
print("[Vionyx Script] Main UI window created.")

-- Configure the open button
print("[Vionyx Script] Configuring open button...")
Window:EditOpenButton({
    Title = "Open Vionyx", -- Renamed button
    Icon = "terminal", -- Changed icon
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF00FF"), Color3.fromHex("00FFFF")), -- Example Vionyx color
    Draggable = true,
})
print("[Vionyx Script] Open button configured.")


-- Create Tabs for different feature categories
print("[Vionyx Script] Creating UI tabs...")
local Tabs = {
    GeneralTab = Window:Tab({ Title = "General", Icon = "gear" }),
    ESPTab = Window:Tab({ Title = "ESP", Icon = "eye" }),
    AimbotTab = Window:Tab({ Title = "Aimbot", Icon = "crosshair" }),
    -- Add more tabs if needed, e.g., "Misc", "Exploits"
}
print("[Vionyx Script] UI tabs created.")

Window:SelectTab(1) -- Select the first tab initially
print("[Vionyx Script] Selected initial tab.")

-- Function to create a text input for a slider value (replaces WindUI Slider)
local function createValueInput(tab, options, variableToUpdate, isTransparency)
    -- Create a container frame for the label and textbox
    local containerFrame = Instance.new("Frame")
    containerFrame.Size = UDim2.new(1, 0, 0, 45) -- Adjust height as needed
    containerFrame.BackgroundTransparency = 1
    containerFrame.Name = options.Name .. "InputContainer" -- Give it a unique name
    containerFrame.Parent = tab.Content -- Place in the tab's content frame (Assuming tab.Content is the parent)

    local layout = Instance.new("UIListLayout")
    layout.FillDirection = Enum.FillDirection.Vertical
    layout.Padding = UDim.new(0, 2) -- Adjust spacing
    layout.Parent = containerFrame

    -- Create the TextLabel to display the name and current value
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(1, 0, 0, 20) -- Adjust size
    valueLabel.BackgroundTransparency = 1
    valueLabel.TextColor3 = Color3.new(1, 1, 1)
    valueLabel.TextStrokeTransparency = 0.5
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Left
    valueLabel.TextYAlignment = Enum.TextYAlignment.Center
    valueLabel.Font = Enum.Font.SourceSans
    -- Display initial value
    local initialDisplayValue = isTransparency and options.CurrentValue or options.CurrentValue
    valueLabel.Text = options.Name .. ": " .. tostring(initialDisplayValue) .. (options.Suffix or "")
    valueLabel.Parent = containerFrame

    -- Create the TextBox for manual input
    local valueTextBox = Instance.new("TextBox")
    valueTextBox.Size = UDim2.new(1, -20, 0, 25) -- Adjust size for padding/suffix
    valueTextBox.PlaceholderText = "Enter value"
    valueTextBox.Text = tostring(initialDisplayValue)
    valueTextBox.BackgroundTransparency = 0.5
    valueTextBox.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    valueTextBox.TextColor3 = Color3.new(1, 1, 1)
    valueTextBox.TextSize = 14
    valueTextBox.Font = Enum.Font.SourceSans
    valueTextBox.ClearTextOnFocus = false -- Keep text when focused
    valueTextBox.Parent = containerFrame

    -- Add a suffix label next to the textbox if a suffix is defined
    if options.Suffix then
        local suffixLabel = Instance.new("TextLabel")
        suffixLabel.Size = UDim2.new(0, 20, 1, 0) -- Size to fit the suffix
        suffixLabel.BackgroundTransparency = 1
        suffixLabel.TextColor3 = Color3.new(1, 1, 1)
        suffixLabel.TextStrokeTransparency = 0.5
        suffixLabel.TextSize = 14
        suffixLabel.TextXAlignment = Enum.TextXAlignment.Left
        suffixLabel.TextYAlignment = Enum.TextYAlignment.Center
        suffixLabel.Text = options.Suffix
        suffixLabel.Font = Enum.Font.SourceSans
        suffixLabel.Parent = containerFrame -- Place in the same container

        -- Adjust textbox size to make space for the suffix label
        valueTextBox.Size = UDim2.new(1, -suffixLabel.Size.X.Offset, 0, 25)
    end


    -- Connect TextBox events
    valueTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local enteredText = valueTextBox.Text
            local numberValue = tonumber(enteredText)

            if numberValue ~= nil then
                -- Clamp the value within the defined range
                local clampedValue = math.clamp(numberValue, options.Range[1], options.Range[2])

                -- Update the script variable
                if isTransparency then
                    -- Convert percentage (0-100) to 0-1 range for the variable
                    variableToUpdate = clampedValue / 100
                    circleTransparency = variableToUpdate -- Update the global variable
                else
                    variableToUpdate = clampedValue
                    -- Update the corresponding global variable based on option name
                    if options.Name == "ESP Update Speed" then
                        frameCount = math.floor(variableToUpdate) -- Ensure integer for frame count
                    elseif options.Name == "Enemy Priority Radius" then
                        priorityRadius = variableToUpdate
                    elseif options.Name == "Aimbot FOV" then
                        fovAngleDegrees = variableToUpdate
                    elseif options.Name == "Circle Thickness" then
                        circleThickness = variableToUpdate
                    end
                end

                -- Update the display label and textbox text to the clamped value
                local displayValue = isTransparency and clampedValue or clampedValue
                valueLabel.Text = options.Name .. ": " .. tostring(displayValue) .. (options.Suffix or "")
                valueTextBox.Text = tostring(displayValue)

                print("Manual input for " .. options.Name .. " set to: " .. displayValue)

            else
                -- Invalid input, revert textbox text to current variable value
                local currentValue = isTransparency and circleTransparency * 100 or (
                     options.Name == "ESP Update Speed" and frameCount or
                     options.Name == "Enemy Priority Radius" and priorityRadius or
                     options.Name == "Aimbot FOV" and fovAngleDegrees or
                     options.Name == "Circle Thickness" and circleThickness
                )
                valueTextBox.Text = tostring(currentValue)
                print("Invalid input for " .. options.Name .. ". Please enter a number.")
            end
        end
    end)

    -- Return the container frame created
    return containerFrame
end


-- --- UI Elements and Callbacks (adapted from provided script) ---

-- General Tab
Tabs.GeneralTab:Toggle({
	Name = "ESP",
	Desc = "Toggle Entity ESP visuals",
	CurrentValue = espOn,
	Flag = "espToggle",
	Callback = function(Value)
		espOn = Value
		if not Value then
			clearESP() -- Clear visuals when ESP is turned off
		end
	end
})

Tabs.GeneralTab:Toggle({
	Name = "Night Vision",
	Desc = "Enhance visibility in dark areas",
	CurrentValue = nightVisionOn,
	Flag = "nightVisionToggle",
	Callback = function(Value)
		nightVisionOn = Value
		if Value then
			enableLighting() -- Apply lighting changes
		else
			resetLighting() -- Reset lighting changes
		end
	end
})

Tabs.GeneralTab:Toggle({
	Name = "Noclip",
	Desc = "Pass through walls and objects",
	CurrentValue = noclipEnabled,
	Flag = "noclip",
	Callback = function(Value)
		noclipEnabled = Value
        -- Note: A more complete noclip implementation might need to handle
        -- physics state changes or character movement differently.
	end
})

Tabs.GeneralTab:Toggle({
	Name = "Aimbot",
	Desc = "Automatically aim at enemies",
	CurrentValue = aimbotEnabled,
	Flag = "aimbotToggle",
	Callback = function(Value)
		aimbotEnabled = Value
        -- The aimbot circle visibility is now controlled by the separate toggle
        -- and updated in the RenderStepped loop.
	end
})

Tabs.GeneralTab:Button({
	Name = "Disable All",
	Desc = "Turn off all major features",
	Callback = function()
        -- Find and set the value of the feature toggles
		local espToggle = Window:FindFirstChild("Tabs"):FindFirstChild("General"):FindFirstChild("ESP") -- Find by name/path
        if espToggle and espToggle:IsA("Frame") and espToggle:FindFirstChild("Toggle") then
             espToggle.Toggle:Set(false) -- Assuming Set method exists on the toggle element
        end

        local nightVisionToggle = Window:FindFirstChild("Tabs"):FindFirstChild("General"):FindFirstChild("Night Vision")
         if nightVisionToggle and nightVisionToggle:IsA("Frame") and nightVisionToggle:FindFirstChild("Toggle") then
             nightVisionToggle.Toggle:Set(false)
         end

        local noclipToggle = Window:FindFirstChild("Tabs"):FindFirstChild("General"):FindFirstChild("Noclip")
         if noclipToggle and noclipToggle:IsA("Frame") and noclipToggle:FindFirstChild("Toggle") then
             noclipToggle.Toggle:Set(false)
         end

        local aimbotToggle = Window:FindFirstChild("Tabs"):FindFirstChild("General"):FindFirstChild("Aimbot")
         if aimbotToggle and aimbotToggle:IsA("Frame") and aimbotToggle:FindFirstChild("Toggle") then
             aimbotToggle.Toggle:Set(false)
         end

        -- Call the clearESP function directly
		clearESP()
        -- Hide the aimbot circle directly by setting its visibility variable and updating the Drawing object
        showAimbotCircle = false
        circle.Visible = false
	end
})

Tabs.GeneralTab:Button({
	Name = "Unload Script",
	Desc = "Disconnect all connections and destroy UI",
	Callback = function()
		if renderConnection then
			renderConnection:Disconnect()
			renderConnection = nil
		end
		clearESP() -- Clean up ESP visuals
		circle.Visible = false -- Hide aimbot circle
        circle:Destroy() -- Destroy the drawing object

        -- Attempt to reset lighting to default
        resetLighting()

        -- Attempt to reset noclip (might not work perfectly without tracking original states)
        local char = localPlayer.Character
        if char then
             for _, part in pairs(char:GetDescendants()) do
                 if part:IsA("BasePart") then
                     -- This is a best guess; original CanCollide might be different
                     part.CanCollide = true
                 end
             end
        end


        -- Destroy the WindUI window
        if Window then
            Window:Destroy() -- Assuming WindUI window object has a Destroy method
        end

        -- Note: WindUI library itself might remain loaded in memory.
        -- A full unload might require more advanced techniques depending on the executor.
	end
})

-- ESP Tab
Tabs.ESPTab:Toggle({
	Name = "Only Show Alive Entities",
	Desc = "Only display ESP for entities with Health > 0",
	CurrentValue = onlyWhenAlive,
	Flag = "onlyWhenAlive",
	Callback = function(Value)
		onlyWhenAlive = Value
        clearESP() -- Clear and re-add ESP based on new setting
	end
})

Tabs.ESPTab:Toggle({
	Name = "Custom Highlight Entities",
	Desc = "Enable custom highlight modes per entity type",
	CurrentValue = highlightEnabled,
	Flag = "entityHighlight",
	Callback = function(Value)
		highlightEnabled = Value
		if Value then
            -- Use the player's chosen modes if enabled
			entityHighlightModes = table.clone(playerChosenEntityHighlightModes)
		else
            -- Use default modes if custom is disabled
			entityHighlightModes = table.clone(defaultEntityHighlightModes)
		end
        clearESP() -- Clear and re-add ESP based on new highlight modes
	end
})

-- Use the custom function for ESP Update Speed (replaces slider)
createValueInput(Tabs.ESPTab, {
	Name = "ESP Update Speed",
	Desc = "How often ESP visuals are updated (in frames)",
	Range = { 1, 100 },
	Increment = 1, -- Keep for reference, not used by text input directly
	Suffix = "frames",
	CurrentValue = frameCount,
	Flag = "espSpeed", -- Keep for reference
	Callback = function(Value) -- Keep the callback structure for consistency
		-- The actual variable update is handled by the text input FocusLost
	end
}, frameCount) -- Pass the variable to update


Tabs.ESPTab:Paragraph({
	Title = "Change Entity Highlight",
	Content = "Select an entity and a highlight mode below to customize its ESP appearance. 'Highlight' (Green), 'Warn' (Yellow), 'Ignore' (No Label), 'None' (No ESP)."
})

-- Dropdown to select an entity type
local entityOptions = keys(readableHighlightModes)
if #entityOptions > 0 then
    currentEntity = entityOptions[1] -- Set initial selected entity
    highlightMode = capitalizeFirst(readableHighlightModes[currentEntity]) -- Set initial highlight mode display
else
    currentEntity = "No Entities Found"
    highlightMode = "None"
end


Tabs.ESPTab:Dropdown({
	Name = "Entity Picker",
	Desc = "Select an entity type to customize",
	Options = entityOptions,
	CurrentOption = currentEntity,
	MultipleOptions = false,
	Flag = "entityPicker",
	Callback = function(Options)
		currentEntity = Options[1]
        -- Update the highlight mode dropdown to show the current mode for the selected entity
        local mode = readableHighlightModes[currentEntity] or "none"
        highlightMode = capitalizeFirst(mode)
        -- Find the highlight mode dropdown UI element and update its display
        local modeDropdown = Window:FindFirstChild("Tabs"):FindFirstChild("ESP"):FindFirstChild("Entity Highlight Mode") -- Find by name/path
         if modeDropdown and modeDropdown:IsA("Frame") and modeDropdown:FindFirstChild("Dropdown") then
             modeDropdown.Dropdown:Set(capitalizeFirst(mode)) -- Assuming Set method exists
         end
	end
})

Tabs.ESPTab:Dropdown({
	Name = "Entity Highlight Mode",
	Desc = "Choose the highlight mode for the selected entity",
	Options = { "Highlight", "Warn", "Ignore", "None" },
	CurrentOption = highlightMode,
	MultipleOptions = false,
	Flag = "entityModePicker",
	Callback = function(Options)
		highlightMode = Options[1]
        -- Update the player's chosen modes table
        local internalName = readableToInternal[currentEntity]
        if internalName then
             playerChosenEntityHighlightModes[internalName] = string.lower(highlightMode)
             -- If custom highlights are enabled, update the active modes and re-apply ESP
             if highlightEnabled then
                 entityHighlightModes = table.clone(playerChosenEntityHighlightModes)
                 clearESP() -- Clear and re-add ESP with new modes
             end
        end
	end
})


-- Aimbot Tab
Tabs.AimbotTab:Dropdown({
	Name = "Target Bodypart",
	Desc = "Choose which bodypart the aimbot targets",
	Options = { "Head", "HumanoidRootPart", "Torso", "UpperTorso", "LowerTorso" },
	CurrentOption = aimbotTargetBodyPart,
	MultipleOptions = false,
	Flag = "aimbotTargetBodypart",
	Callback = function(Options)
		aimbotTargetBodypart = Options[1] -- Corrected variable name
	end
})

Tabs.AimbotTab:Paragraph({
	Title = "Priority Radius",
	Content = "When Aimbot is enabled, entities with 'kill-first' tag within this radius are prioritized."
})

-- Use the custom function for Enemy Priority Radius (replaces slider)
createValueInput(Tabs.AimbotTab, {
	Name = "Enemy Priority Radius",
	Desc = "Radius for prioritizing 'kill-first' entities",
	Range = { 0, 250 },
	Increment = 1, -- Keep for reference
	Suffix = "meters",
	CurrentValue = priorityRadius,
	Flag = "enemyPriorityRadius", -- Keep for reference
	Callback = function(Value)
		-- The actual variable update is handled by the text input FocusLost
	end
}, priorityRadius) -- Pass the variable to update


-- Use the custom function for Aimbot FOV (replaces slider)
createValueInput(Tabs.AimbotTab, {
	Name = "Aimbot FOV",
	Desc = "Field of View for Aimbot targeting",
	Range = { 5, 90 },
	Increment = 1, -- Keep for reference
	Suffix = "degrees",
	CurrentValue = fovAngleDegrees,
	Flag = "aimbotFOV", -- Keep for reference
	Callback = function(Value)
		-- The actual variable update is handled by the text input FocusLost
	end
}, fovAngleDegrees) -- Pass the variable to update


Tabs.AimbotTab:Toggle({
	Name = "Show Aimbot FOV Circle",
	Desc = "Display a circle indicating the Aimbot FOV",
	CurrentValue = showAimbotCircle,
	Flag = "showAimbotCircle",
	Callback = function(Value)
		showAimbotCircle = Value
        -- The circle visibility is updated in the RenderStepped loop
	end
})

Tabs.AimbotTab:ColorPicker({
	Name = "Circle Color",
	Desc = "Color of the Aimbot FOV circle",
	Color = circleColor,
	Flag = "aimbotCircleColor",
	Callback = function(Value)
		circleColor = Value
        -- The circle color is updated in the RenderStepped loop
	end
})

-- Use the custom function for Circle Thickness (replaces slider)
createValueInput(Tabs.AimbotTab, {
	Name = "Circle Thickness",
	Desc = "Thickness of the Aimbot FOV circle",
	Range = { 0.1, 5 },
	Increment = 0.1, -- Keep for reference
	Suffix = "",
	CurrentValue = circleThickness,
	Flag = "aimbotCircleThickness", -- Keep for reference
	Callback = function(Value)
		-- The actual variable update is handled by the text input FocusLost
	end
}, circleThickness) -- Pass the variable to update


-- Use the custom function for Circle Transparency (replaces slider)
createValueInput(Tabs.AimbotTab, {
	Name = "Circle Transparency",
	Desc = "Transparency of the Aimbot FOV circle",
	Range = { 0, 100 },
	Increment = 1, -- Keep for reference
	Suffix = "%",
	CurrentValue = circleTransparency * 100, -- Display as percentage
	Flag = "aimbotCircleTransparency", -- Keep for reference
	Callback = function(Value)
		-- The actual variable update is handled by the text input FocusLost
	end
}, circleTransparency, true) -- Pass the variable and true for isTransparency


-- Note: Keybinds tab and functionality from the original script are complex
-- to integrate directly into WindUI's simple keybind callbacks.
-- You would need to manually implement key listeners using UserInputService
-- if you want keybinds for features.

-- The main RenderStepped loop is already running due to the connection made earlier.
-- No need for a separate while loop here unless you have other non-rendering logic.

print("[Vionyx Script] Script initialization complete.")
